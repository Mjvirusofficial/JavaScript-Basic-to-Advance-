  
############################## Oops in javascript ❤️ || Date 2 August || Relevel by unacadamy ####################################

1.What is Oops?
Oops stands for Object Oriented Programming language. And the main purpose of the oops is to deal with real world entities using 
programming language.

#Features of Oops are:-
-> Class
-> Object
-> Encapsulation
-> Abastraction
-> Inheritance
-> Polymorphism -> (i)  Overloading
                -> (ii) Overriding

1.What is class in Opps?
-> Class is a bluepriny of real-life entities.

-> It defines the characteristics of an object like colour, shape, size.

-> In real world class is the best example of human beings and it's 
properties is colour, size, 2 Eye, 2 Ear, 2 Hand etc.

#Program of a class with obj:- 
class Mjvirus {
  constructor(fname, lname){
    this.M = fname;
    this.J = lname;
  }

  virus(){
    console.log(`Your 1st name is:-  ${this.M}\nYour last name is:- ${this.J}`)
  }
}

let Mj = new Mjvirus("Mj","virus")
Mj.virus()
________________________________________________________________________________________________________________________________

2. What is objects in Opps?
-> Object is an instance of class.

-> Which have key value pair sometimes having properties and method.

-> Example of object is:- let's say a cup which have some properties like it's colour, it's design, its shape, it's material etc.

-> Here, cup is object and properties is it's look like means, colour, shape and design etc.

#We can create an object in four ways:- 
1.Object.create
2.Object litral
3.Constructor
4.Class 

1.Program of Object.create():- 
let mj = Object.create({
  fname: "Mj",
  lname: "virus"
})
console.log(mj)
console.log(mj.fname)

Object create is a method which is used to create a new object using an existing object called prototype.
________________________________________________________________________________________________________

2.Program of Object litral:-

let virus = {
  name: "Deepak Ravidas",
  age: 18
}
delete virus.name;
console.log(virus)

Object litrals is a comma-separated list of name-value pair which inside of curly braces.
________________________________________________________________________________________________________

This is the @wesome difference between object create and object litrals:-

let mj = Object.create({
  fname: "Mj",
  lname: "virus"
})
delete mj.name;
console.log(mj.fname)


let virus = {
  name: "Deepak Ravidas",
  age: 18
}
delete virus.name;
console.log(virus)

We can delete any item of object when we use object litrals.

But we can't delete any element in object when we create an object using object.create.
_________________________________________________________________________________________________________

3.What is Encapsulation in Oops?
Encapsulation is a mechanism which is used to wrapped all the data and method in a single unit.
In Encapsulation declare the class varrible as private________________________________________#

#Program of Encapsulation:-

class MyName{
#name = "Mj"
}

let obj1 = new MyName()
console.log(obj1.name)

#Using getName & SetName we can access the private properties in javascript.
#Program look like_________________________________________________________#

 #name = "Deepak";

    getName(){
        return this.#name;
    }

    setName(n){
        this.#name = n;
    }
}

let simp = new simple()
console.log(simp.getName())

_________________________________________________________________________________________________________

4.What is Abastraction in Oops?
Abastraction is also the most important feature in javascript,
It is used to hide the non-essential features of the program

In other word it is the process which is used to hiding the implementation
detail from the user, Showing only the highlighted set of service to the user.

In Advantages of Abastraction:- 
First is security and Second is enhencement.

class Mjvirus{
    constructor(array)
    {
        this.a = array
    }
    sorting()
    {
       return this.a.sort((a,b) => a-b)
    }
}

let obj = new Mjvirus([5,4,3,2,1])
console.log(obj.sorting())

_________________________________________________________________________________________________________

5.What is Inheritance ?
Inheritance is also one of the most important feature in javascript 
which is used to provide the reuseablity in the program___________#

In inheritence, One class access all the properties of another class
by help of extends keyword_________________________________________#

#Iska mtlb @gar aap 4 new new class bnaty ho to @aapko usey access 
krny k liye different different object bnany ki jarurat nii h You
can access all the data and method by creating only one object 
but before this you have to extends your class_____________________#

class parent{
    constructor(name,age){
    this.Name = name;
    this.Age = age;
    }
}

class child extends parent{
    Display(){
        console.log(`Hey ${Name},\n Your are ${Age} years old.`)
        // See, here this class access the all properties of own parent class
    }
}

obj = new child("Mj virus",18)
console.log(obj)

________________________________________________________________________________________________________

6.What is Polymorphism?
It is define as a way to perform one operation or action in multiple forms.
In other word, Polymorphism came from greak word which means having same 
functon different beheaviour______________________________________________#

#There are two types of polymorphism:-
1. Overloading
2. Overriding

javascript doesn't support Overloading,

#Program of Overloading:-

class Overloading{
    Student(name){
        console.log("name:-",name)
    }

    Student(name,age){
        console.log("Name:-",name)
        console.log("Age:-",age)
    }
}

let obj = new Overloading()
obj.Student("Deepak",18)


#Program of Overriding:-

class virus{
    MyName(name)
    {
      console.log("Name:- ",name)
    }
}

class Mj extends virus{
    MyName(name,cource)
    {
      console.log("Name:- ",name,"Cource:- ",cource)
    }
}

let obj = new Mj;
obj.MyName("Deepak Ravidas","F.E")
_____________________________________________________________________________________________________________________________

#Next topic is Prototype...!
3 AUGUST 2022______________#


1.What is prototype?
#Concept 1:
Every function or object in javascript has a property called 
prototype/ __protp__ its a object__________________________#

function MyName(name,age){
    this.n = name;
    this.a = age;
}

console.log(MyName.prototype)



#Concept 2:
How to access a Prototype in JavaScript? || ########### 3 August 2022 ###############
Prototype can be access as a constructorFunction.prototype in of Constructor function
And __proto__ in case of object_____________________________________________________#

function Mj(name){
    this.n = name;
 }
 console.log(Mj.prototype)

 let Mjvirus = new Mj("Deepak")
 console.log(Mjvirus.__proto__)



#Concept 3:

// How to added a properties in JavaScript? || ########### 3 August 2022 ###############
// Prototype can be access as a constructorFunction.prototype in of Constructor function
// And __proto__ in case of object_____________________________________________________#

function fun(name){
  this.name = name;
  console.log(this.name)
}

let f1 = new fun("Mj virus")
console.log(f1)

// Adding new properties like class

fun.prototype.class =  function(c){
  this.class = c;
  console.log(this)
}
let f2 = new fun("Deepak,18")
console.log(f2)

2.What is Prototype chaining?
--> Every javascript has a in_buit property that is known as prototype.

--> This prototype is nothing but an object itself,

--> As its an object so, it will contain its own prototype

--> This will create a chain of property inside the another prototype 
    known as prototype channing_________________________________________#

--> This chain will end also when we reach a prototype with null value.

--> Object.getPrototypeOf() method is used to fetch the prototype object. 

____________________________________________________________________________________________

3.Define process & threads?
#Process:-
Process is a whole program you can say, which is excutable.
what is program then program is a set of instruction & you
can say a collection of code______________________________#

&
#Thread:-
Thread is nothing but segment of a process means, its a small part of process
in other word you can say________________________________________________#
Thread is way that tells to the program how to excute in fastly or slowely.

let,s understand single-thread and multi-threads:-
You have a task to iterate a loop 100 tym?
you have 2 option________________________#

#Option 1:
Single-thread that take to take 1sec in one itreration
you know if take 1se to iterate one time then it will 
take 100sec to iterate all.

Option 2:
Multi-threads means you loop iterate 100 time then divide
its on 4 single thread that is called multi-threads
You iterate each loop at 25 time.
1 loop 25 time.
2 loop 25 time.
3 loop 25 time.
4 loop 25 time.
You find the total time in multi-thread in 25 second.

So, Multi-thread is more faster than single thread;

4.What is Synchronous and Asynchronous?
#Synchronous:-
Synchronous is process that excute your instruction one by one
Which means supose you have 4 instruction________________________#

instruction 1
instruction 2
instruction 3
instruction 4

@fter compelete your first instruction the move on next instruction.

#Asynchronous:-
Asynchronous is also a process but its not excute your instruction
one by one its, excute your all instructoin at time.
Which means supose you have 4 instruction__________#

instruction 1
instruction 2
instruction 3
instruction 4
 
Compelete your all instruction at a time.


We have two Asynchronous funtion in javascript
1.SetTimeout
2.Setinterval

#SetTimeout:-
Its allows to run a function some interval of time.
means, its delay the excution time________________#

Syntax:- setTimeout(functon || your code..., delayTime,arg1,arg2)

function add(n1,n2){
  console.log(`Addition of ${n1} and ${n2} is:- ${n1+n2}`)
}
add(2,4)

setTimeout(add,2000,5,5)

#SetInterval:-
Its allows to run a function repeatedly, starting after the 
specified interval of time then repeat continously 
at that interval_________________________________#

Syntax:- setInterval(functon || your code..., delayTime,arg1,arg2)

function add(n1,n2){
    console.log(`Addition of ${n1} and ${n2} is:- ${n1+n2}`)
}
  
setInterval(add,1000,5,5)
 
#ClearInterval:- 
It is the method used to stop/clear the interval.

● It accepts the variable more precisely intervalID to which we assign the 
setInterval(). Here we use clearInterval(getFood) with getFood variable to stop the 
setInterval().

● It does not clear the delay in the setInterval. It actually stops the setInterval() event 
itself before execution.

function add(n1,n2){
    console.log(`Addition of ${n1} and ${n2} is:- ${n1+n2}`)
}

let clear = setInterval(add,1000,5,5)
clearInterval(clear)


